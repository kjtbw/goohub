#+TITLE: goohub -- CLI filter for Google Calendar

* Summary
goohubは，Google Calendarとの認証を行い，予定の取得や送信を行うCLIツールである．
現在開発中の機能として，Google Calendar上の予定をユーザが指定したルールによって予定を書き換え，特定のメディア(Google Calendar, Slack, メール)に送信する機能をもつ．
開発中の機能を利用する場合は，下部のUse Development Functionを参照すること．

* Requirements
+ Ruby 2.1.5 ~
+ bundler 1.15.14 ~
+ Redis 4.0.1 ~

* Installation and Setup
1. Clone code
 #+BEGIN_SRC sh
 $ git clone git@github.com:kjtbw/goohub.git
 #+END_SRC

2. Install gems
 #+BEGIN_SRC sh
 $ bundle install --path vendor/bundle
 #+END_SRC

3. Initialize
 #+BEGIN_SRC sh
 $ bundle exec ruby exe/goohub init
 #+END_SRC
 この際，GoogleCalendarAPIの，client_idと，client_secretが必要になる．
    1. https://console.developers.google.com
    2. https://developers.google.com/adwords/api/docs/guides/authentication?hl=ja#installed

4. Check goohub version
 #+BEGIN_SRC sh
 $ bundle exec ruby exe/goohub version
 #+END_SRC

5. Authorize
 #+BEGIN_SRC sh
 $ bundle exec ruby exe/goohub auth
 #+END_SRC

6. Check authorize
 #+BEGIN_SRC sh
 $ bundle exec ruby exe/goohub calendars
 #+END_SRC
 認証に成功した場合，GoogleCalendarで閲覧できるカレンダの一覧が表示される．

* Usage
|Command Name | Description|
|-------------|-------------|
|goohub auth           | GoogleCalendarAPIの認証を行う．|
|goohub calendars     | カレンダの一覧を表示する．|
|goohub configuration | 現在の設定を確認する．|
|goohub events CALENDAR_ID START_MONTH ( END_MONTH ) | CALINDAR_IDのカレンダについて，START_MONTHからEND_MONTHまでの期間の予定を取得する．|
|goohub get_event CALENDAR_ID EVENT_ID | CALENDAR_IDのカレンダ上のEVENT_IDの予定を取得する．|
|goohub help [COMMAND]| COMMANDという名前のコマンドの詳細を表示する．|
|goohub init  | 初期設定を行う．|
|goohub post_event CALENDAR_ID TITLE START END | CALENDAR_IDのカレンダに予定を追加する．(予定名:TITLE, 開始日時:START, 終了日時:END)|
|goohub version     | goohubのバージョンを表示する．|

以下のコマンドで，コマンドの一覧を確認できる．
#+BEGIN_SRC sh
bundle exec ruby exe/goohub
#+END_SRC

以下のコマンドで，コマンドの詳細を確認できる．
#+BEGIN_SRC sh
$ bundle exec ruby exe/goohub help [COMMAND]
#+END_SRC

* Use Development Function
** Summary
現在開発中の機能として，Google Calendar上の予定をユーザが指定したルールによって予定を書き換え，特定のメディア(Google Calendar, Slack, メール)に送信する機能がある．
この機能では，ユーザが指定するルールを以下のデータ構造で定義する．
| variable name  | summary   |
|----------------|-----------|
| funnels        |  以下のfilters, actions, outletsを指定する識別子をもつ． |
| filters        | どの予定を編集するかを表す |
| actions        | 予定をどのように書き換えるかを表す |
| outlets        | 予定を公開するアプリケーションの種類を表す |


また，各変数について，条件の記述にはDSLを用いる．
DSLの文法は，https://github.com/kjtbw/goohub/wiki/%E3%83%A6%E3%83%BC%E3%82%B6%E3%81%8C%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AE%E5%BD%A2%E5%BC%8F に記述してある．

** Install and Setup
   この機能を利用する場合は，以下の手順を行う必要がある．

1. Checkout branch

   この機能は，現状dev_masterブランチで開発しているため，そのブランチにチェックアウトする．
   #+BEGIN_SRC sh
 $ git chehkout dev_master
   #+END_SRC

2. Write Settings
   #+BEGIN_SRC sh
 $ cp settings.yml.sample settings.yml
 $ vim settings.yml
   #+END_SRC

   settings.ymlでは，以下の項目を設定する．
   #+BEGIN_SRC sh
# You must set `db_path` because goohub use json file for DB
db_path: <goohub_db_file_path>

# If you make funnel, and you want to use funnel, you need `exec_funnel`
exec_funnel:
    - <your_funnel_name>

# If you use Slack in outlet informant, you need `slack_incoming_webhook_url`
# See https://api.slack.com/incoming-webhooks
slack_incoming_webhook_url: https://XXXXXXXXXX

# If you use mail in outlet informant, you need `mail_address` and `mail_password`
mail_address: <your_mail_address>
mail_password: <your_password>
   #+END_SRC

** Command List
   | Command Name                                      | summary                                                                                          |
   |---------------------------------------------------+--------------------------------------------------------------------------------------------------|
   | goohub read TYPE                                  | TYPE(funnels, filters, actions, outlets)で指定した種類のDBを読む                                 |
   | goohub write TYPE NAME QUERY                      | TYPE(funnels, filters, actions, outlets)で指定した種類について，DBに追記する．                   |
   | goohub share CALENDAR_ID EVENT_ID                 | CALENDAR_ID上のEVENT_IDの予定を，settings.ymlの`exec_funnel`で指定したfunnelに従って，共有する． |
   | goohub server CALENDAR_ID START_MONTH (END_MONTH) | CALENDAR_ID上の，START_MONTHからEND_MONTHの期間について，まだDBに登録されていない予定を出力する  |
   | goohub sinatra                                    | GUIシステム用のHTTPサーバをlocalhost:4567に立てる．                                               |

   `sinatra`コマンドで立てたHTTPサーバのAPIは，https://github.com/kjtbw/goohub/wiki/sintara%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E7%AB%8B%E3%81%A6%E3%82%8BHTTP%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6 に示す．

** Usage
1. Make your funnels, filters, actions, and outlets
   #+BEGIN_SRC sh
　$ bundle exec ruby exe/goohub write funnels <name> <filter_name> --action-name=<action_name> --outlet-name=<outlet_name>
　$ bundle exec ruby exe/goohub write filters <name> <condition>
　$ bundle exec ruby exe/goohub write actions <name> <modifier>
　$ bundle exec ruby exe/goohub write outlets <name> <informant>
   #+END_SRC

2. Set exec_funnel in settings.yml
   #+BEGIN_SRC sh
 exec_funnel:
    - <your_funnel_name>
   #+END_SRC

3. Check your funnels
   #+BEGIN_SRC sh
 $ bundle exec ruby exe/goohub share CALENDAR_ID EVENT_ID
   #+END_SRC
   コマンドが成功すれば，funnelで指定した予定共有が行われる．

*** Automatic execution of funnel
    `server_test.sh`を用いることで，カレンダの更新に合わせて自動でfunnelを適用できる．
    `server_test.sh`は以下のように用いる．

    #+BEGIN_SRC sh
 $ chmod +x server_test.sh
 $ ./server_test.sh -h # server_test.shの詳細を確認
 $ ./server_test.sh -ep CALENDAR_ID
    #+END_SRC
    このプログラムを実行することで，CALENDAR_IDで指定したカレンダについて，予定の更新があれば，更新された予定にfunnelを適用できる．
