#!/usr/bin/env ruby
# coding: utf-8
require 'time'
start_ruby_time = Time.now
puts "start_ruby"
puts start_ruby_time.iso8601(6)


require "rubygems"

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

require 'googleauth'
require 'googleauth/stores/file_token_store'
require 'google/api_client/client_secrets'
require 'google/apis/calendar_v3'
require "clian"

# time = Time.now
# puts "before_goohub_require"
# puts time.iso8601(6)


require "goohub"

# time = Time.now
# puts "after_goohub_require"
# puts time.iso8601(6)


require 'goohub/command'

# time = Time.now
# puts "after_require_goohub_command"
# puts time.iso8601(6)


require 'benchmark'

Clian::Cli.bundler_rbenv_setup(__FILE__)

Encoding.default_external="UTF-8"

class GoohubCLI < Clian::Cli
  package_name 'GOOHUB'

  Signal.trap(:INT){
    Thor.new.say "Interrupted quit.", :red
    exit(0)
  }

  private

  def setup_global_options(command, *args)
    exit_on_error do
      return true if ["init", "help"].member?(command.name)

      @config = Goohub::Config.create_from_file(options[:config] ||
                                                DEFAULT_CONFIG_PATH)
      @time_list = Hash.new
      @list = Goohub::Resource::TimestampCollection.new
    end
  end

  def client
    @client_call_n = 1 if @client_call_n == nil
    begin
      #get_time("start_client_func_#{@client_call_n}th")
      #@list.dump.push(Goohub::Resource::Timestamp.new("start_client_func_#{@client_call_n}th", 5))
      @client ||= Goohub::Client.new(@config.general, "goohub")
      #@list.dump.push(Goohub::Resource::Timestamp.new("end_client_func_#{@client_call_n}th", 2))

      #get_time("end_client_func_#{@client_call_n}th")
      @client_call_n = @client_call_n + 1
      return @client
    rescue Goohub::Client::AuthorizationError
      STDERR.print "ERROR: try goohub auth command.\n"
      exit(1)
    end
  end

  def get_time(str)
    flag = true # if you don't use, set flag to false
    if flag
      time = Time.now
      @time_list[str] = time
    end
  end

  def puts_time
    puts "############start puts time###############"
    @time_list.each_with_index { |(k, v), i|
      puts "#{k}: #{v.iso8601(6)}"
      puts v - @before_time if @before_time
      @before_time = v
    }
    puts "############end puts time###############"
  end

end

# for_eval
# p caller()[0]
before_goohub_start_time = Time.now
puts "before_goohub_start"
puts before_goohub_start_time.iso8601(6)

# list = Goohub::Resource::TimestampCollection.new
# list.dump.push(Goohub::Resource::Timestamp.new("before_goohub_start", 1))
# list.dump.push(Goohub::Resource::Timestamp.new("before_goohub_start2", 2))
# list.print
# exit()
GoohubCLI.start(ARGV)

end_ruby_time = Time.now
puts "end_ruby"
puts end_ruby_time.iso8601(6)

# p "start_ruby_time"
# p start_ruby_time
#start_func = @list.dump.find { |t| t.name == "start_func" }
p "diff : before_goohub_start - start_ruby"
p before_goohub_start_time - start_ruby_time
